import { GraphQLContext } from "./context";
import { Resolvers } from "@/generated/graphql"; // generated by graphql-codegen
import bcrypt from "bcryptjs"; // Make sure to install bcryptjs: npm install bcryptjs @types/bcryptjs

export const resolvers: Resolvers<GraphQLContext> = {
  Query: {
    // --- USER QUERIES ---
    users: async (_parent, _args, { prisma }) => {
      return prisma.user.findMany();
    },
    user: async (_parent, { id }, { prisma }) => {
      return prisma.user.findUnique({ where: { id } });
    },

    // --- TEAM QUERIES ---
    teams: async (_parent, _args, { prisma }) => {
      return prisma.team.findMany({
        include: {
          members: {
            include: {
              user: true,
              role: true,
            },
          },
          projects: true,
        },
      });
    },
    team: async (_parent, { id }, { prisma }) => {
      return prisma.team.findUnique({
        where: { id },
        include: {
          members: {
            include: {
              user: true,
              role: true,
            },
          },
          projects: {
            include: { owner: true },
          },
        },
      });
    },

    // --- PROJECT QUERIES ---
    projects: async (_parent, _args, { prisma }) => {
      return prisma.project.findMany({
        include: { team: true, owner: true },
      });
    },
    project: async (_parent, { id }, { prisma }) => {
      return prisma.project.findUnique({
        where: { id },
        include: { team: true, owner: true, tasks: true, designs: true },
      });
    },

    // --- ROLE QUERIES ---
    roles: async (_parent, _args, { prisma }) => prisma.teamRole.findMany(),
    role: async (_parent, { id }, { prisma }) =>
      prisma.teamRole.findUnique({ where: { id } }),

    // --- DESIGN QUERIES ---
    designs: async (_parent, _args, { prisma }) =>
      prisma.design.findMany({
        include: { comments: true, project: true },
      }),
    design: async (_parent, { id }, { prisma }) =>
      prisma.design.findUnique({
        where: { id },
        include: { comments: true, project: true },
      }),

    // --- TASK QUERIES ---
    tasks: async (_parent, { projectId }, { prisma }) =>
      prisma.task.findMany({
        where: {
          // This now correctly filters by projectId if it's provided
          projectId: projectId ?? undefined,
        },
        include: { project: true, creator: true, assignee: true },
      }),
    task: async (_parent, { id }, { prisma }) =>
      prisma.task.findUnique({
        where: { id },
        include: { project: true, creator: true, assignee: true },
      }),
  },

  Mutation: {
    // --- USER MUTATIONS ---
    createUser: async (_parent, { fullName, username, email, password }, { prisma }) => {
      const hashedPassword = await bcrypt.hash(password, 10);
      return prisma.user.create({
        data: {
          fullName,
          username,
          email,
          hashedPassword,
        },
      });
    },

    // --- TEAM MUTATIONS ---
    createTeam: async (_parent, { name, logoUrl, ownerId, ownerRoleId }, { prisma }) => {
      const team = await prisma.team.create({
        data: {
          name,
          logoUrl,
          members: {
            create: {
              userId: ownerId,
              roleId: ownerRoleId,
            },
          },
        },
      });
      return team;
    },
    updateTeam: async (_parent, { id, name, logoUrl }, { prisma }) => {
      return prisma.team.update({
        where: { id },
        data: { name, logoUrl },
      });
    },
    deleteTeam: async (_parent, { id }, { prisma }) => {
      await prisma.team.delete({ where: { id } });
      return true;
    },
    addTeamMember: async (_parent, { teamId, userId, roleId }, { prisma }) => {
      return prisma.teamMember.create({
        data: {
          teamId,
          userId,
          roleId,
        }
      });
    },

    // --- PROJECT MUTATIONS ---
    createProject: async (_parent, { name, description, ownerId, teamId }, { prisma }) => {
      return prisma.project.create({
        data: {
          name,
          description,
          owner: ownerId ? { connect: { id: ownerId } } : undefined,
          team: { connect: { id: teamId } },
        },
      });
    },
    updateProject: async (_parent, { id, name, description }, { prisma }) => {
      return prisma.project.update({
        where: { id },
        data: { name, description },
      });
    },
    deleteProject: async (_parent, { id }, { prisma }) => {
      await prisma.project.delete({ where: { id } });
      return true;
    },

    // --- ROLE MUTATIONS ---
    createRole: async (_parent, { name }, { prisma }) => {
      return prisma.teamRole.create({ data: { name } });
    },
    updateRole: async (_parent, { id, name }, { prisma }) => {
      return prisma.teamRole.update({ where: { id }, data: { name } });
    },
    deleteRole: async (_parent, { id }, { prisma }) => {
      await prisma.teamRole.delete({ where: { id } });
      return true;
    },

    // --- DESIGN MUTATIONS ---
    createDesign: async (_parent, { name, projectId, designTypeId, createdById }, { prisma }) => {
      return prisma.design.create({
        data: {
          name,
          project: { connect: { id: projectId } },
          type: { connect: { id: designTypeId } },
          creator: createdById ? { connect: { id: createdById } } : undefined,
        },
      });
    },
    updateDesign: async (_parent, { id, name }, { prisma }) => {
      return prisma.design.update({ where: { id }, data: { name } });
    },
    deleteDesign: async (_parent, { id }, { prisma }) => {
      await prisma.design.delete({ where: { id } });
      return true;
    },

    // --- TASK MUTATIONS ---
    createTask: async (
      _parent,
      { title, description, priority, status, projectId, createdById, assigneeId },
      { prisma }
    ) => {
      return prisma.task.create({
        data: {
          title,
          description,
          priority,
          status,
          project: { connect: { id: projectId } },
          creator: createdById ? { connect: { id: createdById } } : undefined,
          assignee: assigneeId ? { connect: { id: assigneeId } } : undefined,
        },
        // âœ… This 'include' block fixes the error
        include: {
          project: true,
          creator: true,
          assignee: {
            include: {
              user: true, // Also include the nested user for the assignee
            },
          },
        },
      });
    },
    updateTask: async (_parent, { id, title, description, status, priority }, { prisma }) => {
      return prisma.task.update({
        where: { id },
        data: { title, description, status, priority },
      });
    },
    deleteTask: async (_parent, { id }, { prisma }) => {
      await prisma.task.delete({ where: { id } });
      return true;
    },
  },
};